package com.sun_post.mypasswordmanager;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Typeface;
import android.net.Uri;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.sun_post.crypto.PasswordManager;
import com.sun_post.crypto.PasswordManagerSingleton;

import java.util.ArrayList;
import java.util.List;

public class ViewPasswordsActivity extends ActionBarActivity {

    private PasswordManager passwordManager;
    PasswordArrayAdapter adapter;
    private List<String> usernames;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_view_passwords);

        passwordManager = PasswordManagerSingleton.getInstance();
        ArrayList<String> usernames = new ArrayList<>();
        usernames.addAll(passwordManager.getAllPasswordNames());
        adapter = new PasswordArrayAdapter(
                this, R.layout.password_display_item, usernames);
        ListView listView = (ListView) findViewById(R.id.passwordListView);
        listView.setAdapter(adapter);
    }

    @Override
    protected void onResume() {
        super.onResume();
        ArrayList<String> names = new ArrayList<>();
        names.addAll(passwordManager.getAllPasswordNames());
        names.removeAll(usernames);
        adapter.addItems(names);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_view_passwords, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.add_credential_pair) {
            Intent i = new Intent(this, AddPasswordActivity.class);
            startActivity(i);
        } else if (id == R.id.change_master_password) {
            Intent i = new Intent(this, ChangeMasterPasswordActivity.class);
            startActivity(i);
        } else if (id == R.id.logout) {
            logout();
        }  else if (id == R.id.backup) {
            backupData();
        }

        return super.onOptionsItemSelected(item);
    }

    private void backupData(){
        String subject = "MyPasswordManager data backup";
        Intent emailBackupIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                "mailto", "", null));
        emailBackupIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{""});
        emailBackupIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
        emailBackupIntent.putExtra(Intent.EXTRA_TEXT, "This email was automatically generated by " +
                "MyPasswordManager. Send this email to yourself!");
        emailBackupIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("content://" + EmailBackupProvider.AUTHORITY
                + "/" + passwordManager.getPasswordFileName()));
        startActivity(Intent.createChooser(emailBackupIntent, "Send Email"));
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)  {
        if (keyCode == KeyEvent.KEYCODE_BACK ) {
            logout();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    private void logout() {
        passwordManager.logout();
        startActivity(new Intent(this, LoginActivity.class));
        finish();
    }

    private class PasswordArrayAdapter extends ArrayAdapter<String> {

        private Context context;
        private final List<Boolean> passwordShowing;

        public PasswordArrayAdapter(Context context, int textViewResourceId,
                                  List<String> usernamesList) {
            super(context, textViewResourceId, usernamesList);
            usernames = usernamesList;
            this.context = context;
            this.passwordShowing = new ArrayList<>();
            for (int i = usernames.size(); i > 0; i--)
                this.passwordShowing.add(false);
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            LayoutInflater inflater = (LayoutInflater) context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View passwordRow = inflater.inflate(R.layout.password_display_item, parent, false);

            String[] decodedUsernameAndNote = usernames.get(position).split("\0");
            TextView usernameView = (TextView) passwordRow.findViewById(R.id.usernameTextView);
            usernameView.setText(decodedUsernameAndNote[0]);
            TextView noteView = (TextView) passwordRow.findViewById(R.id.passwordNote);
            if (decodedUsernameAndNote.length > 1) noteView.setText(decodedUsernameAndNote[1]);

            Button showPasswordButton = (Button) passwordRow.findViewById(R.id.showPasswordButton);
            showPasswordButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    LinearLayout parent = (LinearLayout)v.getParent();
                    TextView passwordTextView = (TextView) parent.findViewById(R.id.passwordTextView);
                    Button showPasswordButton = (Button) parent.findViewById(R.id.showPasswordButton);
                    String username = AddPasswordActivity.usernameNoteSaveFormat(
                            ((TextView)(parent.findViewById(R.id.usernameTextView))).getText().toString(),
                            ((TextView)(parent.findViewById(R.id.passwordNote))).getText().toString());
                    int pos = usernames.indexOf(username);
                    if (passwordShowing.get(pos)) {
                        passwordTextView.setText("hidden");
                        passwordTextView.setTypeface(null, Typeface.ITALIC);
                        passwordTextView.setBackgroundColor(0x00000000);
                        showPasswordButton.setText("Show");
                    } else {
                        try {
                            passwordTextView.setText(passwordManager.retrievePassword(usernames.get(pos)));
                        } catch (Exception e) {
                            Toast.makeText(ViewPasswordsActivity.this, "An error occurred.",
                                    Toast.LENGTH_SHORT).show();
                            return;
                        }
                        passwordTextView.setTypeface(null, Typeface.BOLD);
                        passwordTextView.setBackgroundColor(0x33FF0000);
                        showPasswordButton.setText("Hide");
                    }
                    passwordTextView.setTextIsSelectable(!passwordTextView.isTextSelectable());
                    passwordShowing.set(pos, !passwordShowing.get(pos));
                }
            });

            ImageButton deletePasswordButton = (ImageButton) passwordRow.findViewById(R.id.deletePasswordButton);
            deletePasswordButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    final View vFinal = v;
                    AlertDialog.Builder ad = new AlertDialog.Builder(ViewPasswordsActivity.this);
                    ad.setIcon(android.R.drawable.ic_dialog_alert);
                    ad.setTitle("Remove these credentials?");
                    ad.setMessage("Are you sure you want to remove this entry? It will be unrecoverable.");
                    ad.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            LinearLayout parent = (LinearLayout) vFinal.getParent();
                            String username = AddPasswordActivity.usernameNoteSaveFormat(
                                    ((TextView)(parent.findViewById(R.id.usernameTextView))).getText().toString(),
                                    ((TextView)(parent.findViewById(R.id.passwordNote))).getText().toString());
                            int pos = usernames.indexOf(username);
                            try {
                                passwordManager.removePassword(username);
                            } catch (Exception e) {
                                Toast.makeText(ViewPasswordsActivity.this, "An error occurred.",
                                        Toast.LENGTH_SHORT).show();
                                return;
                            }
                            usernames.remove(pos);
                            passwordShowing.remove(pos);
                            adapter.notifyDataSetChanged();
                        }
                    });
                    ad.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                        }
                    });
                    ad.create().show();
                }
            });

            return passwordRow;
        }

        public void addItems(ArrayList<String> newUsernames) {
            for (String username : newUsernames) {
                usernames.add(username);
                passwordShowing.add(false);
            }
            adapter.notifyDataSetChanged();
        }
    }
}
